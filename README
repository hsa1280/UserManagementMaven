http://localhost:8080/app.html

The problems I faced:
1. When using spring-boot, there is no need to create a web.xml
2. Place the application.properties under resources folder directly, so @value can find the values
3. Hibernate field 'id' doesn't have a default value, we need to add AUTO_INCREMENT for the id field when creating a table.
4. If we use normal web.xml to config our app, then the project path will be: localhost:8080/projectName/<url-pattern>/html file, this rule also applies to any api call, one example is
$http.get('/UserManagement/page/data')
5. If we use spring-boot, there is no web.xml and WebApplicationConfig to define the viewResolver, so the project path will be: localhost:8080/html file, this rule also applies to any api call; we can
add a path parameter to the project path by adding it in the server: contextPath: /UserManagementMaven, which is in resources/config/application.yml
6. How to run the app:
    a. run mvn spring-boot:run
    b. go to localhost:8080/UserManagementMaven/views/index.html#/productList
7. If there is no dependency, then we don't need to use const annotation = []
8. Slice doesn't change the content of data, but Splice changes the data
9. To run jasmine test, we need to have a karma.conf.js and add a task in Gruntfile.js
we also need to add karma, karma-chrome-launcher, karma-jasmine, grunt-karma to package.json, angular-mocks is also needed




Start/Stop/Restart mysql on Mac:

sudo /usr/local/mysql/support-files/mysql.server start

sudo /usr/local/mysql/support-files/mysql.server stop

sudo /usr/local/mysql/support-files/mysql.server restart

On the Arch Linux:

You can start the MariaDB daemon with:

/usr/bin/mysqld_safe --datadir='/var/lib/mysql'

to see the database:

mysql -u root -p